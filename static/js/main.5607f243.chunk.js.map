{"version":3,"sources":["logo.svg","components/gamelist/TitleCard/TitleCard.jsx","components/gamelist/Card/Card.jsx","components/gamelist/AddNewCard/AddNewCard.jsx","components/gamelist/SearchGameCard/SearchGameCard.jsx","components/gamelist/List/List.jsx","components/gamelist/Layout.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TitleCard","props","className","title","Card","cardText","AddNewCard","SearchGameCard","React","forwardRef","ref","type","placeholder","onChange","onChangeValue","onFocus","focused","onBlur","blured","List","useState","setNewEntry","addButtonVisibile","setAddButtonVisibile","searchVisible","setSearchVisible","searchElement","useRef","listItems","items","map","item","val","target","value","current","focus","listItems2","Layout","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2HAAAA,EAAOC,QAAU,IAA0B,kC,4NCc5BC,G,MAVG,SAACC,GACf,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,wBACZD,EAAME,UCMFC,G,MAVF,SAACH,GACV,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,aACZD,EAAMI,aCMFC,G,MAVI,SAACL,GAChB,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,mBACZD,EAAMI,aCcFE,G,MAlBQC,IAAMC,YAAW,SAACR,EAAOS,GAC5C,OACE,yBAAKR,UAAU,uBACb,yBAAKA,UAAU,uBACb,2BAAOS,KAAK,OACZC,YAAY,oBACZV,UAAU,uBACVW,SAAUZ,EAAMa,cAChBJ,IAAOA,EACPK,QAAUd,EAAMe,QAChBC,OAAShB,EAAMiB,eC0DVC,G,MAvDF,SAAClB,GAAW,IAAD,IACUmB,mBAAS,IADnB,mBACLC,GADK,aAE4BD,mBAChD,2BAHoB,mBAEfE,EAFe,KAEIC,EAFJ,OAKoBH,mBAAS,0BAL7B,mBAKfI,EALe,KAKAC,EALA,KAMhBC,EAAgBC,iBAAO,MAiB7B,OACE,yBAAKzB,UAAU,qBACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CAAWC,MAAOF,EAAM2B,UAAUzB,SAEpC,yBAAKD,UAAU,aACZD,EAAM2B,UAAUC,MAAMC,KAAI,SAACC,GAAD,OACzB,yBAAK7B,UAAU,aACb,kBAAC,EAAD,CAAMG,SAAU0B,QAGpB,qCAAK7B,UAAU,aAAf,YAAsCsB,GACpC,kBAAC,EAAD,CACEV,cA5ByB,SAACkB,GAClCX,EAAYW,EAAIC,OAAOC,QA4BfxB,IAAKgB,EACLV,QAvBY,WACpBO,EAAqB,0BACrBE,EAAiB,4BAsBTP,OApBW,WACnBK,EAAqB,2BACrBE,EAAiB,8BAsBb,4BACEvB,UAAU,aADZ,0BAEaoB,GAFb,yBA/BgB,WACpBI,EAAcS,QAAQC,WA8BlB,GAKE,kBAAC,EAAD,CAAY/B,SAAS,wBCrDzBuB,G,YAAY,CAChBzB,MAAO,iBACP0B,MAAO,CACL,eACA,iBACA,eACA,uBAGEQ,EAAa,CACjBlC,MAAO,iBACP0B,MAAO,CACL,eACA,iBACA,eACA,oBACA,gBACA,+BACA,aACA,UACA,mBACA,oBACA,UACA,+BACA,iBAeWS,EAZA,SAAC,GAAiB,EAAfC,SAChB,OACE,yBAAKrC,UAAU,kBACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAM0B,UAAWA,IACjB,kBAAC,EAAD,CAAMA,UAAWA,IACjB,kBAAC,EAAD,CAAMA,UAAWS,OChCVG,MATf,WACE,OAEA,kBAAC,EAAD,OCKkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5607f243.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\"\n\nimport \"./TitleCard.scss\"\n\nconst TitleCard = (props) => {\n    return (\n      <div className=\"titleCard-card\">\n        <div className=\"titleCard-title-text\">\n          {props.title}\n        </div>\n      </div>\n    )\n  }\n\nexport default TitleCard","import React from \"react\"\n\nimport \"./Card.scss\"\n\nconst Card = (props) => {\n    return (\n      <div className=\"card-card\">\n        <div className=\"card-text\">\n          {props.cardText}\n        </div>\n      </div>\n    )\n  }\n\nexport default Card","import React from \"react\"\n\nimport \"./AddNewCard.scss\"\n\nconst AddNewCard = (props) => {\n    return (\n      <div className=\"addnewcard-card\">\n        <div className=\"addnewcard-text\">\n          {props.cardText}\n        </div>\n      </div>\n    )\n  }\n\nexport default AddNewCard","import React from \"react\"\n\nimport \"./SearchGameCard.scss\"\n\nconst SearchGameCard = React.forwardRef((props, ref) => {\n    return (\n      <div className=\"searchgamecard-card\">\n        <div className=\"searchgamecard-text\">\n          <input type=\"text\" \n          placeholder=\"Search for a game\" \n          className=\"searchgamecard-input\"\n          onChange={props.onChangeValue}\n          ref = {ref}\n          onFocus= {props.focused}\n          onBlur= {props.blured}\n          \n          />\n        </div>\n      </div>\n    )\n  })\n\nexport default SearchGameCard","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport { useState, useRef } from \"react\";\n\n//import TitleCard from \"/../TitleCard/TitleCard\"\nimport TitleCard from \"../TitleCard/TitleCard\";\nimport Card from \"../Card/Card\";\nimport AddNewCard from \"../AddNewCard/AddNewCard\";\nimport SearchGameCard from \"../SearchGameCard/SearchGameCard\";\nimport \"./List.scss\";\n\nconst List = (props) => {\n  const [newEntry, setNewEntry] = useState(\"\");\n  const [addButtonVisibile, setAddButtonVisibile] = useState(\n    \"list-visibility-visible\"\n  );\n  const [searchVisible, setSearchVisible] = useState(\"list-visibility-hidden\");\n  const searchElement = useRef(null);\n\n  const searchOnChangeValueHandler = (val) => {\n    setNewEntry(val.target.value);\n  };\n\n  const addNewClicked = () => {\n    searchElement.current.focus();\n  };\n  const searchFocused = () => {\n    setAddButtonVisibile(\"list-visibility-hidden\");\n    setSearchVisible(\"list-visibility-visible\");\n  };\n  const searchBlured = () => {\n    setAddButtonVisibile(\"list-visibility-visible\");\n    setSearchVisible(\"list-visibility-hidden\");\n  };\n  return (\n    <div className=\"list-list-wrapper\">\n      <div className=\"list-title-card\">\n        <TitleCard title={props.listItems.title} />\n      </div>\n      <div className=\"list-list\">\n        {props.listItems.items.map((item) => (\n          <div className=\"list-card\">\n            <Card cardText={item} />\n          </div>\n        ))}\n        <div className=\"list-card\" className={searchVisible}>\n          <SearchGameCard\n            onChangeValue={searchOnChangeValueHandler}\n            ref={searchElement}\n            focused={searchFocused}\n            blured={searchBlured}\n          />\n        </div>\n\n        <div\n          className=\"list-card\"\n          className={addButtonVisibile}\n          onClick={addNewClicked}\n        >\n          <AddNewCard cardText=\"+ Add new game\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default List;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport List from \"./List/List\";\nimport \"../../style.scss\";\nimport \"./layout.scss\";\n\nconst listItems = {\n  title: \"Completed 2020\",\n  items: [\n    \"Metro Exodus\",\n    \"The Last of Us\",\n    \"Doom Eternal\",\n    \"Horizon Zero Dawn\",\n  ],\n};\nconst listItems2 = {\n  title: \"Completed 2020\",\n  items: [\n    \"Metro Exodus\",\n    \"The Last of Us\",\n    \"Doom Eternal\",\n    \"Horizon Zero Dawn\",\n    \"Nier Automata\",\n    \"The Witcher3: Blood and Wine\",\n    \"Until Dawn\",\n    \"Gears 5\",\n    \"Metro Last Light\",\n    \"Life is Strange 2\",\n    \"Control\",\n    \"Star Wars Jedi: Fallen Order\",\n    \"Just Cause 4\"\n  ],\n};\nconst Layout = ({ children }) => {\n  return (\n    <div className=\"layout-wrapper\">\n      <div className=\"layout-lists\">\n        <List listItems={listItems}></List>\n        <List listItems={listItems}></List>\n        <List listItems={listItems2}></List>\n      </div>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport logo from './logo.svg';\nimport Layout from \"../src/components/gamelist/Layout\"\n\nfunction App() {\n  return (\n\n  <Layout>\n  </Layout>\n  \n  );\n}\n\nexport default App;\n\n /*<div className=\"App\">\n<header className=\"App-header\">\n  <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  <p>\n    Edit <code>src/App.js</code> and save to reload.\n  </p>\n  <a\n    className=\"App-link\"\n    href=\"https://reactjs.org\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n  >\n    Learn React\n  </a>\n</header>\n</div> */ ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}