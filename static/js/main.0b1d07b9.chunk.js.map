{"version":3,"sources":["logo.svg","components/gamelist/TitleCard/TitleCard.jsx","components/gamelist/Card/Card.jsx","components/gamelist/AddNewCard/AddNewCard.jsx","components/gamelist/SearchGameCard/SearchGameCard.jsx","components/gamelist/List/List.jsx","components/gamelist/Layout.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TitleCard","props","className","title","Card","draggableId","cardId","index","provided","draggableProps","dragHandleProps","ref","innerRef","cardText","AddNewCard","SearchGameCard","React","forwardRef","type","placeholder","onChange","onChangeValue","onFocus","focused","onBlur","blured","List","useState","setNewEntry","addButtonVisibile","setAddButtonVisibile","searchVisible","setSearchVisible","searchElement","useRef","droppableId","listId","droppableProps","listCards","map","item","cardTitle","val","target","value","current","focus","cards","lists","listorder","Layout","children","onDragEnd","result","curentList","forEach","i","push","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0b1d07b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\"\n\nimport \"./TitleCard.scss\"\n\nconst TitleCard = (props) => {\n    return (\n      <div className=\"titleCard-card\">\n        <div className=\"titleCard-title-text\">\n          {props.title}\n        </div>\n      </div>\n    )\n  }\n\nexport default TitleCard","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport \"./Card.scss\";\n\nconst Card = (props) => {\n  return (\n    <Draggable draggableId={props.cardId} index={props.index}>\n      {(provided) => (\n        <div\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n        >\n          <div className=\"card-card\">\n            <div className=\"card-text\">{props.cardText}</div>\n          </div>\n        </div>\n      )}\n    </Draggable>\n  );\n};\n\nexport default Card;\n","import React from \"react\"\n\nimport \"./AddNewCard.scss\"\n\nconst AddNewCard = (props) => {\n    return (\n      <div className=\"addnewcard-card\">\n        <div className=\"addnewcard-text\">\n          {props.cardText}\n        </div>\n      </div>\n    )\n  }\n\nexport default AddNewCard","import React from \"react\"\n\nimport \"./SearchGameCard.scss\"\n\nconst SearchGameCard = React.forwardRef((props, ref) => {\n    return (\n      <div className=\"searchgamecard-card\">\n        <div className=\"searchgamecard-text\">\n          <input type=\"text\" \n          placeholder=\"Search for a game\" \n          className=\"searchgamecard-input\"\n          onChange={props.onChangeValue}\n          ref = {ref}\n          onFocus= {props.focused}\n          onBlur= {props.blured}\n          \n          />\n        </div>\n      </div>\n    )\n  })\n\nexport default SearchGameCard","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport { useState, useRef } from \"react\";\n\n//import TitleCard from \"/../TitleCard/TitleCard\"\nimport TitleCard from \"../TitleCard/TitleCard\";\nimport Card from \"../Card/Card\";\nimport AddNewCard from \"../AddNewCard/AddNewCard\";\nimport SearchGameCard from \"../SearchGameCard/SearchGameCard\";\nimport \"./List.scss\";\nimport { Droppable } from \"react-beautiful-dnd\";\n\nconst List = (props) => {\n  const [newEntry, setNewEntry] = useState(\"\");\n  const [addButtonVisibile, setAddButtonVisibile] = useState(\n    \"list-visibility-visible\"\n  );\n  const [searchVisible, setSearchVisible] = useState(\"list-visibility-hidden\");\n  const searchElement = useRef(null);\n\n  const searchOnChangeValueHandler = (val) => {\n    setNewEntry(val.target.value);\n  };\n\n  const addNewClicked = () => {\n    searchElement.current.focus();\n  };\n  const searchFocused = () => {\n    setAddButtonVisibile(\"list-visibility-hidden\");\n    setSearchVisible(\"list-visibility-visible\");\n  };\n  const searchBlured = () => {\n    setAddButtonVisibile(\"list-visibility-visible\");\n    setSearchVisible(\"list-visibility-hidden\");\n  };\n  return (\n    <div className=\"list-list-wrapper\">\n      <div className=\"list-title-card\">\n        <TitleCard title={props.title} />\n      </div>\n      <div className=\"list-list\">\n        <Droppable droppableId={props.listId}>\n          {(provided) => (\n            <div\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n            >\n              {props.listCards.map((item, index) => (\n                <div className=\"list-card\">\n                  <Card cardText={item.cardTitle} cardId={item.cardId} index={index}/>\n                </div>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n\n        <div className=\"list-card\" className={searchVisible}>\n          <SearchGameCard\n            onChangeValue={searchOnChangeValueHandler}\n            ref={searchElement}\n            focused={searchFocused}\n            blured={searchBlured}\n          />\n        </div>\n        <div className=\"list-add-new-wrapper\">\n          <div\n            className=\"list-card\"\n            className={addButtonVisibile}\n            onClick={addNewClicked}\n          >\n            <AddNewCard cardText=\"+ Add new game\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default List;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport List from \"./List/List\";\nimport \"../../style.scss\";\nimport \"./layout.scss\";\nimport {DragDropContext} from 'react-beautiful-dnd'\n\n// array with cards 'id' - 'card title'\nconst cards = {\n  \"1\": \"Metro Exodus\",\n  \"2\": \"The Last of Us\",\n  \"3\": \"Doom Eternal\",\n  \"4\": \"Horizon Zero Dawn\",\n  \"5\": \"Nier Automata\",\n  \"6\": \"Until Dawn\",\n  \"7\": \"Gears 5\",\n  \"8\": \"Metro Last Light\",\n  \"9\": \"Life is Strange 2\",\n  \"10\": \"Control\",\n  \"11\": \"Star Wars Jedi: Fallen Order\",\n  \"12\": \"Just Cause 4\"\n};\nconst lists = {\n  \"1\": { cards: [\"1\", \"2\", \"3\"], title: \"Completed 2020\" },\n  \"2\": { cards: [\"4\", \"5\", \"6\", \"7\"], title: \"To play\" },\n  \"3\": {\n    cards: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\n    title: \"Completed 2019\",\n  },\n};\n//const listorder = [\"1\", \"2\", \"3\"];\nconst listorder = [\"1\"]\nconst Layout = ({ children }) => {\n  const onDragEnd = result =>{\n    // TODO: reorder\n  }\n\n  return (\n    <div className=\"layout-wrapper\">\n      <div className=\"layout-lists\">\n      \n      <DragDropContext\n        onDragEnd={onDragEnd}\n      >\n        {listorder.map((item) => {\n          const listCards = [];\n          const curentList = lists[item]\n          const title = curentList.title\n          const cardsOrder = curentList.cards\n          \n          cardsOrder.forEach(i => {\n            listCards.push({cardTitle: cards[i], cardId: i})\n          });\n\n          return (\n            <List listCards={listCards} title={title} listId={item}/>\n          )\n        })}\n      </DragDropContext>\n      </div>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport logo from './logo.svg';\nimport Layout from \"../src/components/gamelist/Layout\"\n\nfunction App() {\n  return (\n\n  <Layout>\n  </Layout>\n  \n  );\n}\n\nexport default App;\n\n /*<div className=\"App\">\n<header className=\"App-header\">\n  <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  <p>\n    Edit <code>src/App.js</code> and save to reload.\n  </p>\n  <a\n    className=\"App-link\"\n    href=\"https://reactjs.org\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n  >\n    Learn React\n  </a>\n</header>\n</div> */ ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}